{"version":3,"sources":["CardPet.js","ListImage.js","App.js","serviceWorker.js","index.js"],"names":["CardPet","src","Card","Image","wrapped","ui","alt","Content","extra","className","Icon","name","color","link","ListImage","props","loadMore","fetch","then","response","json","message","status","setState","state","listUrl","this","Fragment","pageStart","hasMore","loader","Loader","active","inline","key","map","url","index","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mXAmBeA,EAhBC,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOF,IAAKA,EAAKG,SAAO,EAACC,IAAI,EAAOC,IAAI,cACxC,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,OAAK,GACjB,0BAAMC,UAAU,cACd,kBAACC,EAAA,EAAD,CAAMC,KAAK,OAAOC,MAAM,MAAMC,MAAI,KAEpC,0BAAMJ,UAAU,cACd,kBAACC,EAAA,EAAD,CAAMC,KAAK,QAAQC,MAAM,OAAOC,MAAI,QCgD/BC,G,mBApDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,SAAW,WACTC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACTE,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,OACjB,EAAKC,UAAS,SAAAC,GAAK,sBACdA,EADc,CAEjBC,QAAQ,GAAD,mBACFD,EAAMC,SADJ,YAEFJ,IAELC,kBApBJ,EAAKE,MAAQ,CACXC,QAAS,IAHM,E,iFAQjBC,KAAKV,a,+BAmBI,IACDS,EAAYC,KAAKF,MAAjBC,QACR,OACE,kBAAC,IAAME,SAAP,KACE,kBAAC,IAAD,CACElB,UAAU,cACVmB,UAAW,EACXZ,SAAUU,KAAKV,SACfa,SAAS,EACTC,OACE,kBAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,WAAWxB,UAAU,UAAUyB,IAAI,YAG3D,yBAAKzB,UAAU,YAEbgB,EAAQU,KAAI,SAACC,EAAKC,GAAN,OAAgB,kBAAC,EAAD,CAASpC,IAAKmC,EAAKF,IAAKG,c,GA3CxCC,IAAMC,Y,OCOfC,MARf,WACE,OACE,yBAAK/B,UAAU,aACb,kBAAC,EAAD,QCGAgC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT9B,MAAK,SAAAmC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/B,QACf0B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC7FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,aAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAOvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,aAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtChC,MAAM+B,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BxD,MAAK,SAAAC,GAEJ,IAAMwD,EAAcxD,EAASuD,QAAQE,IAAI,gBAEnB,MAApBzD,EAASG,QACO,MAAfqD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAM5D,MAAK,SAAAmC,GACjCA,EAAa0B,aAAa7D,MAAK,WAC7ByB,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAqB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAM5D,MAAK,WACjCyC,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.963c7239.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Icon, Image } from 'semantic-ui-react';\n\nconst CardPet = ({ src }) => {\n  return (\n    <Card>\n      <Image src={src} wrapped ui={false} alt=\"pet image\" />\n      <Card.Content extra>\n        <span className=\"react-tags\">\n          <Icon name='like' color='red' link />\n        </span>\n        <span className=\"react-tags\">\n          <Icon name='close' color='blue' link />\n        </span>\n      </Card.Content>\n    </Card>\n  )\n}\n\nexport default CardPet;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Loader } from 'semantic-ui-react'\n\nimport CardPet from './CardPet';\nimport './list.css';\n\nclass ListImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listUrl: []\n    }\n  }\n\n  componentDidMount() {\n    this.loadMore();\n  }\n\n  loadMore = () => {\n    fetch('https://dog.ceo/api/breeds/image/random/10')\n    .then(response => response.json())\n    .then(response => {\n      const { message, status } = response;\n      this.setState(state => ({\n        ...state,\n        listUrl: [\n          ...state.listUrl,\n          ...message\n        ],\n        status\n      }))\n    });\n  }\n\n  render () {\n    const { listUrl } = this.state;\n    return (\n      <React.Fragment>\n        <InfiniteScroll\n          className=\"u-width-100\"\n          pageStart={0}\n          loadMore={this.loadMore}\n          hasMore={true || false}\n          loader={\n            <Loader active inline='centered' className=\"u-mt-20\" key=\"loader\" />\n          }\n        >\n          <div className=\"list-pet\">\n          {\n            listUrl.map((url, index) => <CardPet src={url} key={index} />)\n          }\n          </div>\n        </InfiniteScroll>\n        \n      </React.Fragment>\n    )\n  }\n}\n\nexport default ListImage;","import React from 'react';\n\nimport ListImage from './ListImage';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <ListImage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\n      \n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}